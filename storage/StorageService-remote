#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import print_function
from __future__ import absolute_import

import os
import sys

if (not sys.argv[0].endswith("par") and
    not sys.argv[0].endswith("xar") and
    os.getenv('PAR_UNPACK_TMP') == None):

    f = open(sys.argv[0], "r")

    f.readline() # This will be #!/bin/bash
    line = f.readline()
    f.close()

    # The par generator tool always has '# This par was made' as the
    # second line. See fbcode/tools/make_par/make_par.py
    if (not line.startswith('# This par was made')):
        print("""WARNING
        You are trying to run *-remote.py which is
        incorrect as the paths are not set up correctly.
        Instead, you should generate your thrift file with
        thrift_library and then run the resulting
        *-remote.par.
        For more information, please read
        http://fburl.com/python-remotes""")
        exit()

from . import StorageService
from . import ttypes

from thrift.util.remote import Function
from thrift.remote import Remote

FUNCTIONS = {
    'getBound': Function('getBound', 'StorageService', 'QueryResponse', [('GetNeighborsRequest', 'req', 'GetNeighborsRequest')]),
    'boundStats': Function('boundStats', 'StorageService', 'QueryStatsResponse', [('GetNeighborsRequest', 'req', 'GetNeighborsRequest')]),
    'getProps': Function('getProps', 'StorageService', 'QueryResponse', [('VertexPropRequest', 'req', 'VertexPropRequest')]),
    'getEdgeProps': Function('getEdgeProps', 'StorageService', 'EdgePropResponse', [('EdgePropRequest', 'req', 'EdgePropRequest')]),
    'addVertices': Function('addVertices', 'StorageService', 'ExecResponse', [('AddVerticesRequest', 'req', 'AddVerticesRequest')]),
    'addEdges': Function('addEdges', 'StorageService', 'ExecResponse', [('AddEdgesRequest', 'req', 'AddEdgesRequest')]),
    'deleteEdges': Function('deleteEdges', 'StorageService', 'ExecResponse', [('DeleteEdgesRequest', 'req', 'DeleteEdgesRequest')]),
    'deleteVertices': Function('deleteVertices', 'StorageService', 'ExecResponse', [('DeleteVerticesRequest', 'req', 'DeleteVerticesRequest')]),
    'updateVertex': Function('updateVertex', 'StorageService', 'UpdateResponse', [('UpdateVertexRequest', 'req', 'UpdateVertexRequest')]),
    'updateEdge': Function('updateEdge', 'StorageService', 'UpdateResponse', [('UpdateEdgeRequest', 'req', 'UpdateEdgeRequest')]),
    'scanEdge': Function('scanEdge', 'StorageService', 'ScanEdgeResponse', [('ScanEdgeRequest', 'req', 'ScanEdgeRequest')]),
    'scanVertex': Function('scanVertex', 'StorageService', 'ScanVertexResponse', [('ScanVertexRequest', 'req', 'ScanVertexRequest')]),
    'transLeader': Function('transLeader', 'StorageService', 'AdminExecResp', [('TransLeaderReq', 'req', 'TransLeaderReq')]),
    'addPart': Function('addPart', 'StorageService', 'AdminExecResp', [('AddPartReq', 'req', 'AddPartReq')]),
    'addLearner': Function('addLearner', 'StorageService', 'AdminExecResp', [('AddLearnerReq', 'req', 'AddLearnerReq')]),
    'waitingForCatchUpData': Function('waitingForCatchUpData', 'StorageService', 'AdminExecResp', [('CatchUpDataReq', 'req', 'CatchUpDataReq')]),
    'removePart': Function('removePart', 'StorageService', 'AdminExecResp', [('RemovePartReq', 'req', 'RemovePartReq')]),
    'memberChange': Function('memberChange', 'StorageService', 'AdminExecResp', [('MemberChangeReq', 'req', 'MemberChangeReq')]),
    'checkPeers': Function('checkPeers', 'StorageService', 'AdminExecResp', [('CheckPeersReq', 'req', 'CheckPeersReq')]),
    'getLeaderPart': Function('getLeaderPart', 'StorageService', 'GetLeaderResp', [('GetLeaderReq', 'req', 'GetLeaderReq')]),
    'createCheckpoint': Function('createCheckpoint', 'StorageService', 'AdminExecResp', [('CreateCPRequest', 'req', 'CreateCPRequest')]),
    'dropCheckpoint': Function('dropCheckpoint', 'StorageService', 'AdminExecResp', [('DropCPRequest', 'req', 'DropCPRequest')]),
    'blockingWrites': Function('blockingWrites', 'StorageService', 'AdminExecResp', [('BlockingSignRequest', 'req', 'BlockingSignRequest')]),
    'rebuildTagIndex': Function('rebuildTagIndex', 'StorageService', 'AdminExecResp', [('RebuildIndexRequest', 'req', 'RebuildIndexRequest')]),
    'rebuildEdgeIndex': Function('rebuildEdgeIndex', 'StorageService', 'AdminExecResp', [('RebuildIndexRequest', 'req', 'RebuildIndexRequest')]),
    'put': Function('put', 'StorageService', 'ExecResponse', [('PutRequest', 'req', 'PutRequest')]),
    'get': Function('get', 'StorageService', 'GeneralResponse', [('GetRequest', 'req', 'GetRequest')]),
    'remove': Function('remove', 'StorageService', 'ExecResponse', [('RemoveRequest', 'req', 'RemoveRequest')]),
    'removeRange': Function('removeRange', 'StorageService', 'ExecResponse', [('RemoveRangeRequest', 'req', 'RemoveRangeRequest')]),
    'getUUID': Function('getUUID', 'StorageService', 'GetUUIDResp', [('GetUUIDReq', 'req', 'GetUUIDReq')]),
    'lookUpVertexIndex': Function('lookUpVertexIndex', 'StorageService', 'LookUpVertexIndexResp', [('LookUpIndexRequest', 'req', 'LookUpIndexRequest')]),
    'lookUpEdgeIndex': Function('lookUpEdgeIndex', 'StorageService', 'LookUpEdgeIndexResp', [('LookUpIndexRequest', 'req', 'LookUpIndexRequest')]),
}

SERVICE_NAMES = ['StorageService', ]

if __name__ == '__main__':
    Remote.run(FUNCTIONS, SERVICE_NAMES, StorageService, ttypes, sys.argv, default_port=9090)
