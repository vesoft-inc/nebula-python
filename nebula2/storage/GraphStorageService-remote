#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import print_function
from __future__ import absolute_import

import os
import sys

if (not sys.argv[0].endswith("par") and
    not sys.argv[0].endswith("xar") and
    os.getenv('PAR_UNPACK_TMP') == None):

    f = open(sys.argv[0], "r")

    f.readline() # This will be #!/bin/bash
    line = f.readline()
    f.close()

    # The par generator tool always has '# This par was made' as the
    # second line. See fbcode/tools/make_par/make_par.py
    if (not line.startswith('# This par was made')):
        print("""WARNING
        You are trying to run *-remote.py which is
        incorrect as the paths are not set up correctly.
        Instead, you should generate your fbthrift file with
        thrift_library and then run the resulting
        *-remote.par.
        For more information, please read
        http://fburl.com/python-remotes""")
        exit()

from . import GraphStorageService
from . import ttypes

from nebula2.fbthrift.util.remote import Function
from nebula2.fbthrift.remote import Remote

FUNCTIONS = {
    'getNeighbors': Function('getNeighbors', 'GraphStorageService', 'GetNeighborsResponse', [('GetNeighborsRequest', 'req', 'GetNeighborsRequest')]),
    'getProps': Function('getProps', 'GraphStorageService', 'GetPropResponse', [('GetPropRequest', 'req', 'GetPropRequest')]),
    'addVertices': Function('addVertices', 'GraphStorageService', 'ExecResponse', [('AddVerticesRequest', 'req', 'AddVerticesRequest')]),
    'addEdges': Function('addEdges', 'GraphStorageService', 'ExecResponse', [('AddEdgesRequest', 'req', 'AddEdgesRequest')]),
    'deleteEdges': Function('deleteEdges', 'GraphStorageService', 'ExecResponse', [('DeleteEdgesRequest', 'req', 'DeleteEdgesRequest')]),
    'deleteVertices': Function('deleteVertices', 'GraphStorageService', 'ExecResponse', [('DeleteVerticesRequest', 'req', 'DeleteVerticesRequest')]),
    'updateVertex': Function('updateVertex', 'GraphStorageService', 'UpdateResponse', [('UpdateVertexRequest', 'req', 'UpdateVertexRequest')]),
    'updateEdge': Function('updateEdge', 'GraphStorageService', 'UpdateResponse', [('UpdateEdgeRequest', 'req', 'UpdateEdgeRequest')]),
    'scanVertex': Function('scanVertex', 'GraphStorageService', 'ScanVertexResponse', [('ScanVertexRequest', 'req', 'ScanVertexRequest')]),
    'scanEdge': Function('scanEdge', 'GraphStorageService', 'ScanEdgeResponse', [('ScanEdgeRequest', 'req', 'ScanEdgeRequest')]),
    'getUUID': Function('getUUID', 'GraphStorageService', 'GetUUIDResp', [('GetUUIDReq', 'req', 'GetUUIDReq')]),
    'lookupIndex': Function('lookupIndex', 'GraphStorageService', 'LookupIndexResp', [('LookupIndexRequest', 'req', 'LookupIndexRequest')]),
    'lookupAndTraverse': Function('lookupAndTraverse', 'GraphStorageService', 'GetNeighborsResponse', [('LookupAndTraverseRequest', 'req', 'LookupAndTraverseRequest')]),
    'addEdgesAtomic': Function('addEdgesAtomic', 'GraphStorageService', 'ExecResponse', [('AddEdgesRequest', 'req', 'AddEdgesRequest')]),
}

SERVICE_NAMES = ['GraphStorageService', ]

if __name__ == '__main__':
    Remote.run(FUNCTIONS, SERVICE_NAMES, GraphStorageService, ttypes, sys.argv, default_port=9090)
